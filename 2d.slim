initialize() {
     initializeSLiMModelType("nonWF");
     // source(paste(c(OUTDIR, "parameters.slim"), sep="/"));
	  defineConstant("OUTDIR", "/Users/peter/projects/bessel_relatedness");

     defineConstant("K", 200);  // carrying-capacity per unit square (20% overestimate)
     defineConstant("S", 0.1);  // sigma_S, the spatial interaction and dispersal distance
     defineConstant("L", 4);    // mean lifetime at stationarity
     defineConstant("W", 2.0);  // width and height of the simulated area
     defineConstant("DISPERSAL_S", 2 * S); // dispersal distance

     //chromosomes
     defineConstant("C", 1);
     //chromosome length
     defineConstant("GC", 1e8);


     initializeSLiMOptions(dimensionality="xy", periodicity="xy");
     initializeTreeSeq();
     initializeMutationRate(0.0);
     initializeMutationType("m1", 0.5, "f", 0.0);
     initializeGenomicElementType("g1", m1, 1.0);
     initializeRecombinationRate(1e-8);

     // spatial competition and mate choice
     initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
     i1.setInteractionFunction("n", 1.0, S);

     //split genome into chromosomes
     pos=0;
     for(i in 1:C){
        initializeGenomicElement(g1,pos,pos+GC-1);
        pos = pos + GC;
     }
}

reproduction() {
    // choose our nearest neighbor as a mate, within the max distance
    mate = i1.drawByStrength(individual, 1);
    if (mate.size()) {
        for (i in seqLen(rpois(1, 1/L))) {
            offspring = subpop.addCrossed(individual, mate);
            pos = individual.spatialPosition + rnorm(2, 0.0, DISPERSAL_S);
            offspring.setSpatialPosition(p1.pointPeriodic(pos));
        }
    }
}

1 late() {
    sim.addSubpop("p1", asInteger(0.8 * W * W * K));
    p1.setSpatialBounds(c(0.0, 0.0, W, W));
    for (ind in p1.individuals) {
        xy = p1.pointUniform();
        ind.setSpatialPosition(xy);
    }
}

2: early() {
    // density-dependant mortality
    i1.evaluate();
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
    inds.fitnessScaling = 2 / (1 + (L + 1) / (L - 1) * (competition / (K * 2 * PI * S^2)));
}

late() {
    // need to evaluate here to be ready for mate choice
    i1.evaluate();
}

1: late() {
    if ((sim.generation % 200) == 0) {
        cat(sim.generation + " " + p1.individualCount);
        catn(" " + clock());
    }
}

// 1:20 late() {
//     sim.treeSeqOutput(paste0(c(FPATH, "pop_", format("%03d", sim.generation), ".trees")), simplify=T);
// }

5000 late() {
    sim.treeSeqOutput(paste0(c(OUTDIR, "/pop_500000.trees")), simplify=T);
}
